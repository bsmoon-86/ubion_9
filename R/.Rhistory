print(x %/% y)
# 비교연산자
print(x == y)
print(x != y)
print(x > y)
print(x < y)
# 논리연산자
print(!TRUE)
z <- 5
print((x > y) & (z > x))
print((x > y) | (z > x))
# 조건문
# 특정한 조건식이 참인 경우 실행 할 코드와
# 거짓인 경우 실행 할 코드를 나눠서 작성
if (y > 2){
print('y는 2보다 크다')
}
print('y는 4보다 크다')
if(y > 4){
print('y는 4보다 크다')
}
# 참인 경우와 거짓인 경우 다른 코드를 실행 하는 방법
#if ~ else문
if(y > 4){
print('y는 4보다 크다')
}else{
print('y는 4보다 작거나 같다')
}
# score가 90점 이상이면 A
# 90미만 그리고 80 이상이면 B
# 80미만 70이상이면 C 70미만 60이상이면 D
# 그외에는 F
if(score >= 90){
print('A')
}
# 조건식이 여러개인 경우
score = 85
# score가 90점 이상이면 A
# 90미만 그리고 80 이상이면 B
# 80미만 70이상이면 C 70미만 60이상이면 D
# 그외에는 F
if(score >= 90){
print('A')
}
if((score < 90) & (score >= 80)){
print('B')
}
# score가 90점 이상이면 A
# 90미만 그리고 80 이상이면 B
# 80미만 70이상이면 C 70미만 60이상이면 D
# 그외에는 F
if(score >= 90){
print('A')
}else if(score >= 80){
print('B')
}
# score가 90점 이상이면 A
# 90미만 그리고 80 이상이면 B
# 80미만 70이상이면 C 70미만 60이상이면 D
# 그외에는 F
if(score >= 90){
print('A')
}else if(score >= 80){
print('B')
}else if(score >= 70){
print('C')
}else if(score >= 60){
print('D')
}else{
print('F')
}
# 조건식이 여러개인 경우
score = 55
# score가 90점 이상이면 A
# 90미만 그리고 80 이상이면 B
# 80미만 70이상이면 C 70미만 60이상이면 D
# 그외에는 F
if(score >= 90){
print('A')
}else if(score >= 80){
print('B')
}else if(score >= 70){
print('C')
}else if(score >= 60){
print('D')
}else{
print('F')
}
# 로그인 조건식 사용하는 부분
id = 'test'
password = '1234'
if(id == 'test2' & password == '1111'){
print('성공')
}else{
print('실패')
}
# 로그인 조건식 사용하는 부분
id = 'test2'
password = '1234'
if(id == 'test2' & password == '1111'){
print('성공')
}else{
print('실패')
}
# 로그인 조건식 사용하는 부분
id = 'test2'
password = '1111'
if(id == 'test2' & password == '1111'){
print('성공')
}else{
print('실패')
}
# which문
# 백터데이터에서 조건식이 일치하는 위치의 값을 출력
name <- c('test', 'test2', 'test3')
which(name == 'test2')
which(name != 'test2')
which(name == 'test5')
# for문
# 백터데이터의 원소의 개수만큼 반복 실행
array_a = 1:10
for(i in array_a){
print(i)
}
# 비순서형 백터데이터를 이용하여 for문 생성
array_b = c(6, 2, 8, 1)
for (i in array_b){
print(i)
}
array_c = c('test', 'test5', 'test2', 'test10')
for (i in array_c){
print(i)
}
# 초기 시작값을 지정
i = 1
while (i <= 10) {
print(i)
i = i + 1
}
j = 1
while (j <= 10) {
j = j + 1
print(j)
}
# 반복문을 이용하여 1부터 10까지 합계
# 합계라는 변수의 초기값은 0으로 지정
result = 0
# 1부터 10까지 반복을 하는 반복문을 생성
a = 1:10
for (i in a){
result = result + i
# 첫번째 반복 : i = 1, result = 0 + 1 -> result = 1
# 두번째 반복 : i = 2, result = 1 + 2 -> result = 3
# 세번째 반복 : i = 3, result = 3 + 3 -> result = 6
# 네번째 반복 : i = 4, result = 6 + 4 -> result = 10
}
print(result)
for (i in a){
result = reulst + i
}
while TRUE{
print('a')
}
hile TRUE{
print('a')
}
while (TRUE){
print('a')
}
# 합계라는 초기값 0 생성
result = 0
# 반복문에서 사용할 초기 값을 지정
i = 1
while (i < 11){
# result에 i의값을 누적 합
result = result + i
i = i + 1
}
print(result)
# break
# 반복문을 강제로 종료
a = 1:10
for (i in a){
if (i == 5){
break
}
print(i)
}
for (i in a){
print(i)
if (i == 5){
break
}
}
i = 1
while(i <= 10){
print(i)
if(i == 5){
break
}
i = i + 1
}
i = 1
while(i <= 10000000000){
print(i)
if(i == 5){
break
}
i = i + 1
}
for (i in a){
if (i <= 3){
next
}
print(i)
}
for (i in a){
print(i)
if (i <= 3){
next
}
}
i = 1
i = 1
while (i <= 10){
if (i <= 3){
i = i + 1
next
}
print(i)
i = i + 1
}
# 다중 for문
a <- 2:9
b <- 1:9
for (i in a){
for (j in b){
print(i, 'X', j, '=', i*j)
}
}
for (i in a){
for (j in b){
print(i*j)
}
}
# 합계라는 변수를 생성 0이라는 데이터는 대입
sum = 0
# 백터 데이터 생성
list_a = 1:100
for (i in list_a){
print(i)
}
for (i in list_a){
# print(i)
sum = sum + i
}
print(sum)
# 합계라는 변수를 생성 0이라는 데이터는 대입
sum = 0
# 백터 데이터 생성
list_a = 1:100
for (i in list_a){
# 값들을 한번씩 출력
# print(i)
# 해당하는 값들을 합계에 누적 합(1부터 100까지의 합계 확인)
# sum = sum + i
# 짝수라는 조건식을 생성
if (i %% 2 == 0){
# 반복문에서 짝수라는 조건식을 이용하여 해당하는 조건식이 참인 경우 합계에 누적합
sum = sum + i
}
}
print(sum)
# 1부터 100까지 숫자 중 짝수인 데이터의 누적 합
# 2부터 100까지 2씩 증가시킨 데이터의 누적합
sum = 0
i = 2
while (i <= 100){
sum = sum + i
i = i + 2
}
print(sum)
sum = 0
list_a = 1:100
for(i in list_a){
sum = sum + i
if (sum >= 900){
break
}
}
print(i)
print(sum)
sum = 0
i = 1
sum = 0
i = 1
while (i <= 100){
sum = sum + i
i = i + 1
}
print(sum)
sum = 0
i = 1
while (i <= 100){
# 1
if(sum >= 900){
break
}
sum = sum + i
# 2
i = i + 1
# 3
}
print(i)
print(sum)
sum = 0
i = 1
while (i <= 100){
# 1
sum = sum + i
# 2
if(sum >= 900){
break
}
i = i + 1
# 3
}
print(i)
print(sum)
sum = 0
i = 1
while (i <= 100){
# 1
sum = sum + i
# 2
i = i + 1
# 3
if(sum >= 900){
break
}
}
print(i)
print(sum)
sum = 0
i = 1
while (i <= 100){
# 1
sum = sum + i
# 2
if(sum >= 900){
break
}
i = i + 1
# 3
}
print(i)
print(sum)
cat(i, sum)
list_a = 1:6
# 첫번째 for문에서 첫번째 주사위의 경우의 수 만큼 반복
for (i in list_a){
# 두번째 for문에서 두번째 주사위의 경우의 수 만큼 반복
for (j in list_a){
# 두개의 반복문에서 사용하는 변수 i, j 의 합이 9인 조건식을 생성
print(i + j)
# 조건식이 참인 경우 i, j의 데이터를 출력
}
}
# 첫번째 for문에서 첫번째 주사위의 경우의 수 만큼 반복
for (i in list_a){
# 두번째 for문에서 두번째 주사위의 경우의 수 만큼 반복
for (j in list_a){
# 두개의 반복문에서 사용하는 변수 i, j 의 합이 9인 조건식을 생성
# print(i + j)
if( i + j == 9 ){
# 조건식이 참인 경우 i, j의 데이터를 출력
print(i)
print(j)
}
}
}
# 첫번째 for문에서 첫번째 주사위의 경우의 수 만큼 반복
for (i in list_a){
# 두번째 for문에서 두번째 주사위의 경우의 수 만큼 반복
for (j in list_a){
# 두개의 반복문에서 사용하는 변수 i, j 의 합이 9인 조건식을 생성
# print(i + j)
if( i + j == 9 ){
# 조건식이 참인 경우 i, j의 데이터를 출력
# print(i)
# print(j)
cat(i, j)
}
}
}
# 첫번째 for문에서 첫번째 주사위의 경우의 수 만큼 반복
for (i in list_a){
# 두번째 for문에서 두번째 주사위의 경우의 수 만큼 반복
for (j in list_a){
# 두개의 반복문에서 사용하는 변수 i, j 의 합이 9인 조건식을 생성
# print(i + j)
if( i + j == 9 ){
# 조건식이 참인 경우 i, j의 데이터를 출력
# print(i)
# print(j)
cat(i, j)
print('')
}
}
}
# 첫번째 for문에서 첫번째 주사위의 경우의 수 만큼 반복
for (i in list_a){
# 두번째 for문에서 두번째 주사위의 경우의 수 만큼 반복
for (j in list_a){
# 두개의 반복문에서 사용하는 변수 i, j 의 합이 9인 조건식을 생성
# print(i + j)
if( i + j == 9 ){
# 조건식이 참인 경우 i, j의 데이터를 출력
# print(i)
# print(j)
cat(i, j)
print()
}
}
}
# 첫번째 for문에서 첫번째 주사위의 경우의 수 만큼 반복
for (i in list_a){
# 두번째 for문에서 두번째 주사위의 경우의 수 만큼 반복
for (j in list_a){
# 두개의 반복문에서 사용하는 변수 i, j 의 합이 9인 조건식을 생성
# print(i + j)
if( i + j == 9 ){
# 조건식이 참인 경우 i, j의 데이터를 출력
# print(i)
# print(j)
cat(i, j)
print('')
}
}
}
# 첫번째 for문에서 첫번째 주사위의 경우의 수 만큼 반복
for (i in list_a){
# 두번째 for문에서 두번째 주사위의 경우의 수 만큼 반복
for (j in list_a){
# 두개의 반복문에서 사용하는 변수 i, j 의 합이 9인 조건식을 생성
# print(i + j)
if( i + j == 9 ){
# 조건식이 참인 경우 i, j의 데이터를 출력
# print(i)
# print(j)
cat(i, j, '\n')
# print('')
}
}
}
# 첫번째 for문에서 첫번째 주사위의 경우의 수 만큼 반복
for (i in list_a){
# 두번째 for문에서 두번째 주사위의 경우의 수 만큼 반복
for (j in list_a){
# 두개의 반복문에서 사용하는 변수 i, j 의 합이 9인 조건식을 생성
# print(i + j)
if( i + j == 9 ){
# 조건식이 참인 경우 i, j의 데이터를 출력
# print(i)
# print(j)
cat(i, j, '\t')
# print('')
}
}
}
# 매개변수가 존재하지 않는 함수 생성
func_1 = function(){
return 'Hello R'
}
# 매개변수가 존재하지 않는 함수 생성
func_1 = function(){
print('Hello R')
}
func_1()
func_1()
# 매개변수가 존재하는 함수를 생성
func_2 <- function(x, y){
result = x + y
return(result)
}
# 매개변수가 존재하는 함수를 생성
func_2 <- function(x, y){
result = x + y
return(result)
}
print(func_2(5, 3))
print(func_2(1, 2))
result2 = 1
print(result)
# 매개변수가 존재하는 함수를 생성
func_2 <- function(x, y){
result = x + y
print(result)
return(result)
}
print(func_2(5, 3))
# 매개변수가 존재하는 함수를 생성
func_2 <- function(x, y){
result = x + y
print("result")
return(result)
}
print(func_2(5, 3))
func_result = func_2(10, 2)
# 매개변수의 개수와 인자의 개수를 다르게 호출한다면?
print(func_2(3))
print(func_2(3, 2, 1))
