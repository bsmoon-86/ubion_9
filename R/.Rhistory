aes(x = drv, y = mean_hwy)
) + geom_col()
# x축의 데이터를 입력하여 x축 데이터의 빈도수를 그래프 표시
ggplot(data = mpg, aes(x = drv)) + geom_bar()
ggplot(
data = group_data,
aes(x = drv, y = mean_hwy)
) + geom_col()
ggplot(
data = group_data,
aes(x = reorder(drv, mean_hwy), y = mean_hwy)
) + geom_col()
ggplot(
data = group_data,
aes(x = reorder(drv, -mean_hwy), y = mean_hwy)
) + geom_col()
ggplot(
data = group_data,
aes(x = reorder(drv, desc(mean_hwy)), y = mean_hwy)
) + geom_col()
# 라인 그래프
View(mpg)
# 라인 그래프
View(mpg)
# 년도별 차량 출시 개수
mpg %>%
group_by(year) %>%
summarise(count = n())
# 년도별 차량 출시 개수
mpg %>%
group_by(year) %>%
summarise(count = n()) -> group_data2
ggplot(data = group_data2, aes(x = year, y=count)) + geom_line()
economics <- ggplot2::economics
View(economics)
ggplot(
data = economics,
aes(x = date, y = unemploy)
) + geom_line()
# 박스 플롯 그래프
ggplot(
data = mpg,
aes(x = drv, y = hwy)
) + geom_boxplot()
# sav 확장자 파일을 로드하기 위한 패키지 설치
install.packages('foreign')
library(foreign)
welfare <- read.spss("csv/Koweps_hpc10_2015_beta1.sav")
View(welfare)
welfare <- read.spss(
"csv/Koweps_hpc10_2015_beta1.sav",
to.data.frame = T)
View(welfare)
library(haven)
Koweps_hpc10_2015_beta1 <- read_sav("csv/Koweps_hpc10_2015_beta1.sav")
View(Koweps_hpc10_2015_beta1)
# 컬럼의 이름을 변경
rename(
welfare,
gender = h10_g3,
birth = h10_g4,
marriage = h10_g10,
religion = h10_g11,
imcome = p1002_8aq1,
code_job = h10_eco9
) -> welfare
welfare[c(
'gender',
'birth',
'marriage',
'religion',
'imcome',
'code_job')]
welfare %>%
select(gender,
birth,
marriage,
religion,
imcome,
code_job)
welfare %>%
select(gender,
birth,
marriage,
religion,
imcome,
code_job) -> welfare_copy
# 데이터프레임에서 결측치가 존재하는지 확인
is.na(welfare_copy)
table(is.na(welfare_copy))
table(is.na(welfare_copy$gender))
table(is.na(welfare_copy$birth))
table(is.na(welfare_copy$marriage))
table(is.na(welfare_copy$religion))
## gender 컬럼의 데이터를 빈도수 체크
## gender가 1이라면 male 변경
## gender가 2라면 female 변경
## gender가 9라면 - 변경
ifelse(
welfare_copy$gender == 1,
'male',
ifelse(
welfare_copy$gender == 2,
'female',
'-'
)
)
## gender 컬럼의 데이터를 빈도수 체크
## gender가 1이라면 male 변경
## gender가 2라면 female 변경
## gender가 9라면 - 변경
ifelse(
welfare_copy$gender == 1,
'male',
ifelse(
welfare_copy$gender == 2,
'female',
'-'
)
)
table(welfare_copy$gender)
# 데이터프레임의 필터기능을 이용하여 데이터를 변경
# 조건식 : 성별이 1인 데이터의 gender 항목 데이터만 출력
welfare_copy[
welfare_copy$gender == 1,
'gender'
]
# 데이터프레임의 필터기능을 이용하여 데이터를 변경
# 조건식 : 성별이 1인 데이터의 gender 항목 데이터만 출력
welfare_copy[
welfare_copy$gender == 1,
'gender'
] <- 'male'
table(welfare_copy$gender)
welfare_copy[
welfare_copy$gender == 2,
'gender'
] <- 'female'
table(welfare_copy$gender)
## imcome 데이터에서 0, 9999 데이터를 결측치로 변경(이상치로 판단)
welfare_copy$income == 0 | welfare_copy$income == 9999
welfare_copy$income == 0
welfare_copy$imcome
rename(
welfare_copy,
income = imcome
)
rename(
welfare_copy,
income = imcome
) -> welfare_copy
## imcome 데이터에서 0, 9999 데이터를 결측치로 변경(이상치로 판단)
welfare_copy$income == 0 | welfare_copy$income == 9999
welfare_copy$income %in% c(0, 9999)
welfare_copy$income %in% c(0, 9999) -> flag
welfare_copy[flag, ]
# case1
ifelse(
flag,
NA,
welfare_copy$income
)
#case2
welfare_copy[
flag,
'income'
]
#case2
welfare_copy[
flag,
'income'
] <- NA
welfare_copy[flag, ]
welfare_copy[
welfare_copy$income %in% c(0, 9999), ]
### 성별을 기준으로 데이터를 필터링(2개 데이터)
### 임금의 평균 값(결측치를 제외)
welfare_copy[
welfare_copy$gender == 'male', ]
welfare_copy$gender == 'male', ] -> male_data
### 성별을 기준으로 데이터를 필터링(2개 데이터)
### 임금의 평균 값(결측치를 제외)
welfare_copy[
welfare_copy$gender == 'male', ]
### 성별을 기준으로 데이터를 필터링(2개 데이터)
### 임금의 평균 값(결측치를 제외)
male_data <- welfare_copy[
welfare_copy$gender == 'male', ]
mean(male_data$income)
mean(male_data$income, na.rm=T)
female_data <- welfare_copy[
welfare_copy$gender == 'female',
]
mean(female_data$income, na.rm = T)
### income 데이터의 결측치를 제거
### gender를 기준으로 그룹화
### 그룹을 연산을 이용하여 income의 평균 값 생성
### 해당하는 데이터를 그래프 시각화(막대 그래프)
welfare_copy %>%
filter(!is.na(income))
### income 데이터의 결측치를 제거
### gender를 기준으로 그룹화
### 그룹을 연산을 이용하여 income의 평균 값 생성
### 해당하는 데이터를 그래프 시각화(막대 그래프)
welfare_copy %>%
filter(!is.na(income)) %>%
group_by(gender) %>%
summarise(mean_income = mean(income))
### income 데이터의 결측치를 제거
### gender를 기준으로 그룹화
### 그룹을 연산을 이용하여 income의 평균 값 생성
### 해당하는 데이터를 그래프 시각화(막대 그래프)
welfare_copy %>%
filter(!is.na(income)) %>%
group_by(gender) %>%
summarise(mean_income = mean(income)) -> gender_income
ggplot(
data = gender_income,
aes(x = gender, y=mean_income)
) + geom_col()
## tibble 데이터의 형태를 data.frame 형태로 변경
as.data.frame(welfare_copy)
## tibble 데이터의 형태를 data.frame 형태로 변경
as.data.frame(welfare_copy) -> welfare_copy
## 나이 라는 데이터는 존재하지 않는다.
## age 컬럼을 생성하여 현재년도(2015) - birth의 값을 대입
## income 데이터에서 결측치를 제외
## age를 기준으로 그룹화
## 그룹화 연산을 하여 income의 평균 값을 출력
## 해당 결과를 막대그래프로 출력
welfare_copy %>%
mutate(age = 2015 - birth)
## 나이 라는 데이터는 존재하지 않는다.
## age 컬럼을 생성하여 현재년도(2015) - birth의 값을 대입
## income 데이터에서 결측치를 제외
## age를 기준으로 그룹화
## 그룹화 연산을 하여 income의 평균 값을 출력
## 해당 결과를 막대그래프로 출력
welfare_copy %>%
mutate(age = 2015 - birth) %>%
filter(!is.na(income))
## 나이 라는 데이터는 존재하지 않는다.
## age 컬럼을 생성하여 현재년도(2015) - birth의 값을 대입
## income 데이터에서 결측치를 제외
## age를 기준으로 그룹화
## 그룹화 연산을 하여 income의 평균 값을 출력
## 해당 결과를 막대그래프로 출력
welfare_copy %>%
mutate(age = 2015 - birth) %>%
filter(!is.na(income)) %>%
group_by(age) %>%
summarise(mean_income = mean(income))
## 나이 라는 데이터는 존재하지 않는다.
## age 컬럼을 생성하여 현재년도(2015) - birth의 값을 대입
## income 데이터에서 결측치를 제외
## age를 기준으로 그룹화
## 그룹화 연산을 하여 income의 평균 값을 출력
## 해당 결과를 막대그래프로 출력
welfare_copy %>%
mutate(age = 2015 - birth) %>%
filter(!is.na(income)) %>%
group_by(age) %>%
summarise(mean_income = mean(income)) %>%
arrange(mean_income)
## 나이 라는 데이터는 존재하지 않는다.
## age 컬럼을 생성하여 현재년도(2015) - birth의 값을 대입
## income 데이터에서 결측치를 제외
## age를 기준으로 그룹화
## 그룹화 연산을 하여 income의 평균 값을 출력
## 해당 결과를 막대그래프로 출력
welfare_copy %>%
mutate(age = 2015 - birth) %>%
filter(!is.na(income)) %>%
group_by(age) %>%
summarise(mean_income = mean(income)) %>%
arrange(mean_income) %>%
tail(5)
## 나이 라는 데이터는 존재하지 않는다.
## age 컬럼을 생성하여 현재년도(2015) - birth의 값을 대입
## income 데이터에서 결측치를 제외
## age를 기준으로 그룹화
## 그룹화 연산을 하여 income의 평균 값을 출력
## 해당 결과를 막대그래프로 출력
welfare_copy %>%
mutate(age = 2015 - birth) %>%
filter(!is.na(income)) %>%
group_by(age) %>%
summarise(mean_income = mean(income)) -> age_income
ggplot(
data = age_income,
aes(x = age, y = mean_income)
) + geom_col()
2015 - welfare_copy$birth
2015 - welfare_copy$birth -> age
cbind(welfare_copy, age)
cbind(welfare_copy, age) -> welfare_copy
str(welfare_copy)
welfare_copy$age <- age
str(welfare_copy)
## 연령대별 임금의 차이를 확인해보자
## 연령대 데이터는 존재 하지 않는다.
## 연령대(ageg) 컬럼을 생성하여
## age가 40 미만이라면 'young'
## 40이상 60 미만이라면 'middle'
## 60이상이라면 'old'
## 데이터를 대입
## income 데이터 중 결측치를 제외하고
## 연령대별로 그룹화
## 평균 임금 출력 & 막대 그래프 시각화
welfare_copy %>%
mutate(ageg = ifelse(
age < 40,
'young',
ifelse(
age < 60,
'middle',
'old'
)
))
## 연령대별 임금의 차이를 확인해보자
## 연령대 데이터는 존재 하지 않는다.
## 연령대(ageg) 컬럼을 생성하여
## age가 40 미만이라면 'young'
## 40이상 60 미만이라면 'middle'
## 60이상이라면 'old'
## 데이터를 대입
## income 데이터 중 결측치를 제외하고
## 연령대별로 그룹화
## 평균 임금 출력 & 막대 그래프 시각화
welfare_copy %>%
mutate(ageg = ifelse(
age < 40, 'young',
ifelse(age < 60, 'middle', 'old')
)
) %>%
filter(!is.na(income)) %>%
group_by(ageg) %>%
summarise(mean_income = mean(income))
## 연령대별 임금의 차이를 확인해보자
## 연령대 데이터는 존재 하지 않는다.
## 연령대(ageg) 컬럼을 생성하여
## age가 40 미만이라면 'young'
## 40이상 60 미만이라면 'middle'
## 60이상이라면 'old'
## 데이터를 대입
## income 데이터 중 결측치를 제외하고
## 연령대별로 그룹화
## 평균 임금 출력 & 막대 그래프 시각화
welfare_copy %>%
mutate(ageg = ifelse(
age < 40, 'young',
ifelse(age < 60, 'middle', 'old')
)
) %>%
filter(!is.na(income)) %>%
group_by(ageg) %>%
summarise(mean_income = mean(income)) -> ageg_income
ggplot(
data = ageg_income,
aes(x = ageg, y = mean_income)
) + geom_col()
ageg_income
ageg_income[c(3, 1, 2),]
ggplot(
data = ageg_income[c(3, 1, 2),],
aes(x = ageg, y = mean_income)
) + geom_col()
## 그래프의 순서를 young, middle, old 순으로 바꿔서 출력
reorder(ageg_income$ageg, ageg_income$mean_income)
## 그래프의 순서를 young, middle, old 순으로 바꿔서 출력
reorder(ageg_income$ageg, c(3, 1, 2))
ggplot(
data = ageg_income,
aes(x = ageg, y = mean_income)
) + geom_col() + scale_x_discrete(
limits = c('young', 'middle', 'old')
)
ggplot(
data = ageg_income,
aes(x = c('young', 'middle', 'old'), y = mean_income)
) + geom_col()
ggplot(
data = ageg_income,
aes(x = ageg, y = mean_income)
) + geom_col()
ggplot(
data = ageg_income,
aes(x = ageg, y = mean_income)
) + geom_col() + scale_x_discrete(
limits = c('young', 'middle', 'old')
)
welfare_copy %>%
mutate(ageg = ifelse(
age < 40, 'young',
ifelse(age < 60, 'middle', 'old')
)
)
welfare_copy %>%
mutate(ageg = ifelse(
age < 40, 'young',
ifelse(age < 60, 'middle', 'old')
)
) -> welfare_copy
welfare_copy %>%
filter(!is.na(income)) %>%
group_by(ageg, gender) %>%
summarise(mean_income = mean(income))
welfare_copy %>%
filter(!is.na(income)) %>%
group_by(ageg, gender) %>%
summarise(mean_income = mean(income)) -> ageg_gender_income
ggplot(
data = ageg_gender_income,
aes(x = ageg, y = mean_income)
) + geom_col()
ggplot(
data = ageg_gender_income,
aes(x = c(ageg, gender), y = mean_income)
) + geom_col()
ggplot(
data = ageg_gender_income,
aes(x = ageg, y = mean_income, fill=gender)
) + geom_col()
ggplot(
data = ageg_gender_income,
aes(x = ageg, y = mean_income, fill=gender)
) + geom_col(position = 'dodge')
ggplot(
data = ageg_gender_income,
aes(x = ageg, y = mean_income, fill=gender)
) + geom_col(position = 'dodge') + scale_color_discrete(
limits = c('young', 'middle', 'old')
)
ggplot(
data = ageg_gender_income,
aes(x = ageg, y = mean_income, fill=gender)
) + geom_col(position = 'dodge') + scale_x_discrete(
limits = c('young', 'middle', 'old')
)
## excel 데이터를 로드하기 위한 패키지 설치
install.packages('readxl')
libarary(readxl)
library(readxl)
read_excel("csv/Koweps_Codebook.xlsx")
read_excel("csv/Koweps_Codebook.xlsx", sheet = 2)
read_excel("csv/Koweps_Codebook.xlsx", sheet = 2) -> code_book
welfare_copy %>%
filter(is.na(code_job))
welfare_copy %>%
filter(is.na(code_job) & !is.na(income))
welfare_copy %>%
filter(is.na(code_job)) %>%
filter(!is.na(income))
welfare_copy %>%
filter(is.na(code_job)) %>%
filter(is.na(income))
left_join(welfare_copy, code_book, by='code_job')
left_join(welfare_copy, code_book, by='code_job') -> job_data
job_data %>%
filter(!is.na(income))
job_data %>%
filter(!is.na(income)) %>%
group_by(job) %>%
summarise(mean_income = mean(income))
arrange(mean_income)
job_data %>%
filter(!is.na(income)) %>%
group_by(job) %>%
summarise(mean_income = mean(income)) %>%
arrange(mean_income)
job_data %>%
filter(!is.na(income)) %>%
group_by(job) %>%
summarise(mean_income = mean(income)) %>%
arrange(desc(mean_income))
job_data %>%
filter(!is.na(income)) %>%
group_by(job) %>%
summarise(mean_income = mean(income)) %>%
arrange(desc(mean_income)) %>%
head(10)
job_data %>%
filter(!is.na(income)) %>%
group_by(job) %>%
summarise(mean_income = mean(income)) -> job_income
ggplot(
data = job_income,
aes(x = job, y = mean_income)
) + geom_col()
ggplot(
data = job_income,
aes(x = reorder(job, mean_income), y = mean_income)
) + geom_col()
ggplot(
data = job_income,
aes(x = reorder(job, -mean_income), y = mean_income)
) + geom_col()
ggplot(
data = job_income,
aes(x = reorder(job, -mean_income), y = mean_income)
) + geom_col() + coord_flip()
ggplot(
data = job_income,
aes(x = reorder(job, mean_income), y = mean_income)
) + geom_col() + coord_flip()
job_income %>%
arrange(-mean_income) %>%
head(10) -> top10
ggplot(
data = top10,
aes(x = reorder(job, mean_income), y = mean_income)
) + geom_col() + coord_flip()
